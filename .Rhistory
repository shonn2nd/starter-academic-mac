write.csv(data, "~/Users/shsu/Desktop/tm.csv")
write.csv(data, "~/shsu/Desktop/tm.csv")
write.csv(data, "~/Users/shsu/Desktop/tm.csv")
write.csv(data, "~Users/shsu/Desktop/tm.csv")
write.csv(data, "Users/shsu/Desktop/tm.csv")
write.csv(data, "~/Users/shsu/Desktop/tm.csv")
write.csv(data, "~Users/shsu/Desktop/tm.csv")
data
View9data
View(data)
get_wd()
getwd
getwd()
write.xlsx(data, "data.xlsx")
library(xlsx)
write.xlsx(data, "data.xlsx")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidytext)
library(tidyr)
#import our data
data<-read.xlsx("data.xlsx")
?read.xlsx
#import our data
data<-read.xlsx("data.xlsx", sheetIndex = 1)
#import our data
data2<-read.xlsx("data.xlsx", sheetIndex = 1)
#check out dataset
data
#ch4 Relationships between words: 2-grams and correlations
cg_bigrams <- data %>% filter(group == "cg") %>%
unnest_tokens(bigram, title, token = "ngrams", n = 2)
stats_bigrams <- data %>% filter(group == "stats") %>%
unnest_tokens(bigram, title, token = "ngrams", n = 2)
cg_bigrams %>%
count(bigram, sort = TRUE)
stats_bigrams %>%
count(bigram, sort = TRUE)
cg_bigrams_separated <- cg_bigrams %>%
separate(bigram, c("word1", "word2"), sep = " ")
stats_bigrams_separated <- stats_bigrams %>%
separate(bigram, c("word1", "word2"), sep = " ")
cg_bigrams_filtered <- cg_bigrams_separated %>%
filter(!word1 %in% stop_words$word) %>%
filter(!word2 %in% stop_words$word)
stats_bigrams_filtered <- stats_bigrams_separated %>%
filter(!word1 %in% stop_words$word) %>%
filter(!word2 %in% stop_words$word)
# new bigram counts:
cg_bigram_counts <- cg_bigrams_filtered %>%
count(word1, word2, sort = TRUE)
cg_bigram_counts
stats_bigram_counts <- stats_bigrams_filtered %>%
count(word1, word2, sort = TRUE)
stats_bigram_counts
cg_bigrams_united <- cg_bigrams_filtered %>%
unite(bigram, word1, word2, sep = " ")
cg_bigrams_united
stats_bigrams_united <- stats_bigrams_filtered %>%
unite(bigram, word1, word2, sep = " ")
stats_bigrams_united
data %>% filter(group %in% cg) %>%
unnest_tokens(trigram, title, token = "ngrams", n = 3) %>%
separate(trigram, c("word1", "word2", "word3"), sep = " ") %>%
filter(!word1 %in% stop_words$word,
!word2 %in% stop_words$word,
!word3 %in% stop_words$word) %>%
count(word1, word2, word3, sort = TRUE)
data %>% filter(group %in% cg)  %>%
unnest_tokens(trigram, title, token = "ngrams", n = 3) %>%
separate(trigram, c("word1", "word2", "word3"), sep = " ") %>%
filter(!word1 %in% stop_words$word,
!word2 %in% stop_words$word,
!word3 %in% stop_words$word) %>%
count(word1, word2, word3, sort = TRUE)
#ch4 Relationships between words: 2-grams and correlations
cg_bigrams <- data %>% filter(group == "cg") %>%
unnest_tokens(bigram, title, token = "ngrams", n = 2)
stats_bigrams <- data %>% filter(group == "stats") %>%
unnest_tokens(bigram, title, token = "ngrams", n = 2)
cg_bigrams %>%
count(bigram, sort = TRUE)
stats_bigrams %>%
count(bigram, sort = TRUE)
cg_bigrams_separated <- cg_bigrams %>%
separate(bigram, c("word1", "word2"), sep = " ")
stats_bigrams_separated <- stats_bigrams %>%
separate(bigram, c("word1", "word2"), sep = " ")
cg_bigrams_filtered <- cg_bigrams_separated %>%
filter(!word1 %in% stop_words$word) %>%
filter(!word2 %in% stop_words$word)
stats_bigrams_filtered <- stats_bigrams_separated %>%
filter(!word1 %in% stop_words$word) %>%
filter(!word2 %in% stop_words$word)
# new bigram counts:
cg_bigram_counts <- cg_bigrams_filtered %>%
count(word1, word2, sort = TRUE)
cg_bigram_counts
stats_bigram_counts <- stats_bigrams_filtered %>%
count(word1, word2, sort = TRUE)
stats_bigram_counts
cg_bigrams_united <- cg_bigrams_filtered %>%
unite(bigram, word1, word2, sep = " ")
cg_bigrams_united
stats_bigrams_united <- stats_bigrams_filtered %>%
unite(bigram, word1, word2, sep = " ")
stats_bigrams_united
data %>% filter(group == "cg") %>%
unnest_tokens(trigram, title, token = "ngrams", n = 3) %>%
separate(trigram, c("word1", "word2", "word3"), sep = " ") %>%
filter(!word1 %in% stop_words$word,
!word2 %in% stop_words$word,
!word3 %in% stop_words$word) %>%
count(word1, word2, word3, sort = TRUE)
data %>% filter(group == "stats")  %>%
unnest_tokens(trigram, title, token = "ngrams", n = 3) %>%
separate(trigram, c("word1", "word2", "word3"), sep = " ") %>%
filter(!word1 %in% stop_words$word,
!word2 %in% stop_words$word,
!word3 %in% stop_words$word) %>%
count(word1, word2, word3, sort = TRUE)
library(blogdown)
blogdown:::serve_site()
blogdown:::serve_site()
rm(list=ls())
library(blogdown)
blogdown:::serve_site()
knitr::opts_chunk$set(echo = TRUE)
#Relationships between words: 2-grams and correlations
#tokenization
cg_bigrams <- data %>% filter(group == "cg") %>%
unnest_tokens(bigram, title, token = "ngrams", n = 2)
library(tidyverse)
library(tidytext)
library(tidyr)
library(xlsx)
#import our data
data<-read.xlsx("data.xlsx", sheetIndex = 1)
#check out dataset
#turn our dataset into a tibble
data<-as_tibble(data)
data
#Relationships between words: 2-grams and correlations
#tokenization
cg_bigrams <- data %>% filter(group == "cg") %>%
unnest_tokens(bigram, title, token = "ngrams", n = 2)
stats_bigrams <- data %>% filter(group == "stats") %>%
unnest_tokens(bigram, title, token = "ngrams", n = 2)
#check frequency for cg
cg_bigrams %>%
count(bigram, sort = TRUE)
#check frequency for stats
stats_bigrams %>%
count(bigram, sort = TRUE)
View(cg_bigrams)
View(stats_bigrams)
stop_words
#separate bigrams into two columns
cg_bigrams_separated <- cg_bigrams %>%
separate(bigram, c("word1", "word2"), sep = " ")
stats_bigrams_separated <- stats_bigrams %>%
separate(bigram, c("word1", "word2"), sep = " ")
#remove stop words
cg_bigrams_filtered <- cg_bigrams_separated %>%
filter(!word1 %in% stop_words$word) %>%
filter(!word2 %in% stop_words$word)
stats_bigrams_filtered <- stats_bigrams_separated %>%
filter(!word1 %in% stop_words$word) %>%
filter(!word2 %in% stop_words$word)
# new bigram counts without stop words for cg:
cg_bigram_counts <- cg_bigrams_filtered %>%
count(word1, word2, sort = TRUE)
cg_bigram_counts
# new bigram counts without stop words for stats:
stats_bigram_counts <- stats_bigrams_filtered %>%
count(word1, word2, sort = TRUE)
stats_bigram_counts
View(cg_bigrams_filtered)
#separate bigrams into two columns
cg_bigrams_separated <- cg_bigrams %>%
separate(bigram, c("word1", "word2"), sep = " ")
stats_bigrams_separated <- stats_bigrams %>%
separate(bigram, c("word1", "word2"), sep = " ")
#remove stop words
#still separated
cg_bigrams_filtered <- cg_bigrams_separated %>%
filter(!word1 %in% stop_words$word) %>%
filter(!word2 %in% stop_words$word)
stats_bigrams_filtered <- stats_bigrams_separated %>%
filter(!word1 %in% stop_words$word) %>%
filter(!word2 %in% stop_words$word)
# new bigram counts without stop words for cg:
cg_bigram_counts <- cg_bigrams_filtered %>%
count(word1, word2, sort = TRUE)
cg_bigram_counts
# new bigram counts without stop words for stats:
stats_bigram_counts <- stats_bigrams_filtered %>%
count(word1, word2, sort = TRUE)
stats_bigram_counts
bigrams_united<-rbind(cg_bigrams_united, stats_bigrams_united)
#combine separate words for cg
cg_bigrams_united <- cg_bigrams_filtered %>%
unite(bigram, word1, word2, sep = " ")
cg_bigrams_united
#combine separate words for stats
stats_bigrams_united <- stats_bigrams_filtered %>%
unite(bigram, word1, word2, sep = " ")
stats_bigrams_united
bigrams_united<-rbind(cg_bigrams_united, stats_bigrams_united)
bigram_tf_idf <- bigrams_united %>%
count(book, bigram) %>%
bind_tf_idf(bigram, book, n) %>%
arrange(desc(tf_idf))
View(bigrams_united)
bigrams_united<-rbind(cg_bigrams_united, stats_bigrams_united)
bigram_tf_idf <- bigrams_united %>%
count(group, bigram) %>%
bind_tf_idf(bigram, group, n) %>%
arrange(desc(tf_idf))
bigrams_united<-rbind(cg_bigrams_united, stats_bigrams_united)
bigram_tf_idf <- bigrams_united %>%
count(group, bigram) %>%
bind_tf_idf(bigram, group, n) %>%
arrange(desc(tf_idf))
bigram_tf_idf
View(bigrams_united)
View(bigram_tf_idf)
#combine cg_bigrams_united and stats_bigrams_united
#stop words have been removed
bigrams_united<-rbind(cg_bigrams_united, stats_bigrams_united)
bigram_tf_idf <- bigrams_united %>%
count(group, bigram) %>%
bind_tf_idf(bigram, group, n) %>%
arrange(desc(tf_idf))
bigram_tf_idf
#visualization
library(forcats)
bigram_tf_idf %>%
group_by(group) %>%
slice_max(tf_idf, n = 15) %>%
ungroup() %>%
ggplot(aes(tf_idf, fct_reorder(bigram, tf_idf), fill = group)) +
geom_col(show.legend = FALSE) +
facet_wrap(~group, ncol = 2, scales = "free") +
labs(x = "tf-idf", y = NULL)
#sentiment analysis
bigrams <- data %>%
unnest_tokens(bigram, title, token = "ngrams", n = 2)
bigrams_separated <- bigrams %>%
separate(bigram, c("word1", "word2"), sep = " ")
bigrams_separated %>%
filter(word1 == "not") %>%
count(word1, word2, sort = TRUE)
View(bigrams)
#sentiment analysis
bigrams <- data %>%
unnest_tokens(bigram, title, token = "ngrams", n = 2)
bigrams_separated <- bigrams %>%
separate(bigram, c("word1", "word2"), sep = " ")
#negating words
bigrams_separated %>%
filter(word1 == "not") %>%
count(word1, word2, sort = TRUE)
#AFINN
AFINN <- get_sentiments("afinn")
AFINN
#negating words
bigrams_separated %>%
filter(word1 == "not") %>%
count(word1, word2, sort = TRUE)
not_words <- bigrams_separated %>%
filter(word1 == "not") %>%
inner_join(AFINN, by = c(word2 = "word")) %>%
count(word2, value, sort = TRUE)
View(not_words)
bigrams_separated %>%
filter(word1 == "not") %>%
inner_join(AFINN, by = c(word2 = "word")) %>%
count(word2, value, sort = TRUE)
bigrams_separated %>%
filter(word1 == "not") %>%
inner_join(AFINN, by = c(word2 = "word"))
bigrams_separated %>%
filter(word1 == "not") %>%
inner_join(AFINN, by = c(word2 = "word")) %>%
group_by(word2, value) %>% summarise(n = n()) %>% arrange(n)
not_words %>%
mutate(contribution = n * value) %>%
arrange(desc(abs(contribution))) %>%
head(20) %>%
mutate(word2 = reorder(word2, contribution)) %>%
ggplot(aes(n * value, word2, fill = n * value > 0)) +
geom_col(show.legend = FALSE) +
labs(x = "Sentiment value * number of occurrences",
y = "Words preceded by \"not\"")
negated_words <- bigrams_separated %>%
filter(word1 %in% negation_words) %>%
inner_join(AFINN, by = c(word2 = "word")) %>%
count(word1, word2, value, sort = TRUE)
#more effective way to look at negatng words
negation_words <- c("not", "no", "never", "without")
negated_words <- bigrams_separated %>%
filter(word1 %in% negation_words) %>%
inner_join(AFINN, by = c(word2 = "word")) %>%
count(word1, word2, value, sort = TRUE)
View(negated_words)
negated_words %>%
mutate(contribution = n * value) %>%
group_by(word1) %>%
arrange(desc(abs(contribution))) %>%
head(20)
negated_words %>%
mutate(contribution = n * value) %>%
group_by(word1) %>%
arrange(desc(word1, abs(contribution)))
?abs
negated_words %>%
mutate(contribution = abs(n * value))
negated_words %>%
mutate(contribution = abs(n * value))%>%
group_by(word1) %>%
arrange(contribution)
negated_words %>%
mutate(contribution = abs(n * value))%>%
group_by(word1) %>%
arrange(desc(contribution) )
negated_words %>%
group_by(word1) %>%
mutate(contribution = abs(n * value)) %>%
arrange(desc(contribution))
negated_words %>%
mutate(contribution = abs(n * value)) %>%
arrange(word1, desc(contribution))
negated_words %>%
mutate(contribution = abs(n * value)) %>%
arrange(word1, desc(contribution)) %>% View()
negated_words %>%
mutate(contribution = abs(n * value)) %>%
arrange(word1, desc(contribution)) %>%
group_by(word1) %>%
mutate(word2 = reorder(word2, contribution)) %>%
ggplot(aes(n * value, word2, fill = n * value > 0)) +
geom_col(show.legend = FALSE) +
facet_wrap(~group, ncol = 2, scales = "free") +
labs(x = "Sentiment value * number of occurrences",
y = "Words preceded by \"not\"")
negated_words %>%
mutate(contribution = abs(n * value)) %>%
arrange(word1, desc(contribution)) %>%
group_by(word1) %>%
mutate(word2 = reorder(word2, contribution)) %>%
ggplot(aes(n * value, word2, fill = n * value > 0)) +
geom_col(show.legend = FALSE) +
facet_wrap(~word1, ncol = 2, scales = "free") +
labs(x = "Sentiment value * number of occurrences",
y = "Words preceded by \"not\"")
y = "Words preceded by negating words)
y = "Words preceded by negating words)
negated_words %>%
mutate(contribution = abs(n * value)) %>%
arrange(word1, desc(contribution)) %>%
group_by(word1) %>%
mutate(word2 = reorder(word2, contribution)) %>%
ggplot(aes(n * value, word2, fill = n * value > 0)) +
geom_col(show.legend = FALSE) +
facet_wrap(~word1, ncol = 2, scales = "free") +
labs(x = "Sentiment value * number of occurrences",
y = "Words preceded by negating words")
negated_words %>%
mutate(contribution = abs(n * value)) %>%
arrange(word1, desc(contribution))
negated_words %>%
mutate(contribution = abs(n * value)) %>%
arrange(word1, desc(contribution)) %>%
mutate(word2 = reorder(word2, contribution)) %>%
ggplot(aes(n * value, word2, fill = n * value > 0)) +
geom_col(show.legend = FALSE) +
facet_wrap(~word1, ncol = 2, scales = "free") +
labs(x = "Sentiment value * number of occurrences",
y = "Words preceded by negating words")
negated_words %>%
mutate(contribution = abs(n * value)) %>%
mutate(word2 = reorder(word2, contribution)) %>%
ggplot(aes(n * value, word2, fill = n * value > 0)) +
geom_col(show.legend = FALSE) +
facet_wrap(~word1, ncol = 2, scales = "free") +
labs(x = "Sentiment value * number of occurrences",
y = "Words preceded by negating words")
dimaonds
diamonds
diamonds %>% group_by(color) %>% arrange(desc(x))
diamonds %>% arrange(color, desc(x))
diamonds %>% arrange(color, desc(x)) %>% View()
diamonds %>% arrange(cut, desc(table))
diamonds %>% arrange(cut, desc(table)) %>% View()
d<-tibble(gender = c(0,0,0,1,1,1),)
d<-tibble(gender = c(0,0,0,1,1,1), value = c(7,1,4,2,9,6))
d
d %>% arrange(gender, desc(value))
d %>% arrange(desc(gender,value))
d %>% arrange(desc(gender), desc(value))
?arrange()
d
d %>% group_by(gender) %>% arrange(desc(value), .by_group = T)
negated_words %>%
mutate(contribution = abs(n * value)) %>%
group_by(word1) %>%
arrange(desc(contribution), .by_group = T)
negated_words %>%
mutate(contribution = abs(n * value)) %>%
mutate(word2 = reorder(word2, contribution)) %>%
ggplot(aes(n * value, word2, fill = n * value > 0)) +
geom_col(show.legend = FALSE) +
facet_wrap(~word1, ncol = 2, scales = "free") +
labs(x = "Sentiment value * number of occurrences",
y = "Words preceded by negating words")
?reorder
library(igraph)
#visualizing a network of bigrams
bigram_counts<-bigrams %>%
count(bigram, sort = TRUE)
View(bigram_counts)
bigram_graph <- bigram_counts %>%
filter(n > 20) %>%
graph_from_data_frame()
#visualizing a network of bigrams
bigram_counts<-bigrams %>%
count(bigram, sort = TRUE)
bigram_graph <- bigram_counts %>%
filter(n > 20) %>%
graph_from_data_frame()
bigram_graph
library(ggraph)
set.seed(2017)
ggraph(bigram_graph, layout = "fr") +
geom_edge_link() +
geom_node_point() +
geom_node_text(aes(label = name), vjust = 1, hjust = 1)
View(bigrams)
View(bigrams_united)
View(bigrams_separated)
#visualizing a network of bigrams
bigram_counts<-bigrams_united %>%
count(bigram, sort = TRUE)
bigram_graph <- bigram_counts %>%
filter(n > 20) %>%
graph_from_data_frame()
bigram_graph
set.seed(2017)
ggraph(bigram_graph, layout = "fr") +
geom_edge_link() +
geom_node_point() +
geom_node_text(aes(label = name), vjust = 1, hjust = 1)
#visualizing a network of bigrams
bigram_counts<-bigrams %>%
count(bigram, sort = TRUE)
bigram_graph <- bigram_counts %>%
filter(n > 20) %>%
graph_from_data_frame()
bigram_graph
set.seed(2017)
ggraph(bigram_graph, layout = "fr") +
geom_edge_link() +
geom_node_point() +
geom_node_text(aes(label = name), vjust = 1, hjust = 1)
#visualizing a network of bigrams
bigrams_filtered <- bigrams_separated %>%
filter(!word1 %in% stop_words$word) %>%
filter(!word2 %in% stop_words$word)
View(bigrams_filtered)
bigram_counts <- bigrams_filtered %>%
count(word1, word2, sort = TRUE)
View(bigram_counts)
bigram_counts
bigram_graph <- bigram_counts %>%
filter(n > 2) %>%
graph_from_data_frame()
bigram_graph
set.seed(2017)
ggraph(bigram_graph, layout = "fr") +
geom_edge_link() +
geom_node_point() +
geom_node_text(aes(label = name), vjust = 1, hjust = 1)
bigram_graph <- bigram_counts %>%
filter(n > 5) %>%
graph_from_data_frame()
bigram_graph
set.seed(2017)
ggraph(bigram_graph, layout = "fr") +
geom_edge_link() +
geom_node_point() +
geom_node_text(aes(label = name), vjust = 1, hjust = 1)
bigram_graph <- bigram_counts %>%
filter(n > 4) %>%
graph_from_data_frame()
bigram_graph
set.seed(2017)
ggraph(bigram_graph, layout = "fr") +
geom_edge_link() +
geom_node_point() +
geom_node_text(aes(label = name), vjust = 1, hjust = 1)
bigram_graph
set.seed(2020)
a <- grid::arrow(type = "closed", length = unit(.15, "inches"))
ggraph(bigram_graph, layout = "fr") +
geom_edge_link(aes(edge_alpha = n), show.legend = FALSE,
arrow = a, end_cap = circle(.07, 'inches')) +
geom_node_point(color = "lightblue", size = 5) +
geom_node_text(aes(label = name), vjust = 1, hjust = 1) +
theme_void()
library(blogdown)
blogdown:::serve_site()
