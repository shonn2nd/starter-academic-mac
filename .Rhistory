blogdown::serve_site()
blogdown:::serve_site()
?serve_site
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
blogdown::serve_site()
blogdown::serve_site()
knitr::opts_chunk$set(echo = TRUE)
mpg
knitr::opts_chunk$set(echo = TRUE)
data(mpg)
plot(pressure)
View(mpg)
library(tidyverse)
View(mpg)
mpg$id <- seq.int(nrow(mpg))
mpg$id <- seq.int(nrow(mpg))
mpg
?relocate
names(mpg)
mpg$eff<-rowMeans(mpg[,c("displ", "cyl")], na.rm=F)
mpg
names(mpg)
View(mpg)
mpg<-mpg %>% group_by(id) %>% mutate(eff2 = means(c("displ", "cyl"), na.rm=T))
mpg<-mpg %>% group_by(id) %>% mutate(eff2 = mean(c("displ", "cyl"), na.rm=T))
mpg<-mpg %>% group_by(id) %>% summarise(eff2 = mean(c("displ", "cyl"), na.rm=T))
mpg<-mpg %>% group_by(id) %>% summarise(eff2 = mean(c(displ, cyl), na.rm=T))
mpg<-mpg %>% group_by(id) %>% summarise(eff2 = mean(c(`displ`, `cyl`), na.rm=T))
mpg<-mpg %>% group_by(id) %>% summarise(eff2 = mean(c(displ, cyl), na.rm=T))
mpg<-mpg %>% group_by(id) %>% summarise(eff2 = rowMeans(c(displ, cyl), na.rm=T))
mpg<-mpg %>% group_by(id) %>% summarise(eff2 = rowMeans(c(`displ`, `cyl`), na.rm=T))
mpg<-mpg %>% mutate (eff2 = rowMeans(c(`displ`, `cyl`), na.rm=T))
mpg<-mpg %>% mutate (eff2 = rowMeans(c("displ", "cyl"), na.rm=T))
mpg<-mpg %>% mutate (eff2 =
rowMeans(select(., c(displ, cyl))))
mpg %>% mutate (eff2 =
rowMeans(select(., c(`displ`, `cyl`))))
mpg %>% mutate (eff2 =
map2_dbl(displ, cyl, mean))
mpg %>% mutate (eff2 =
map2_dbl(`displ`, `cyl`, mean))
names(mpg)
mpg
library(tidyverse)
mpg
drop mpg
mpg
detach(tidyverse)
detach("package:tidyverse", unload = TRUE)
library(tidyverse)
mpg
mpg
rm(mpg)
library(tidyverse)
mpg
mpg$eff<-rowMeans(mpg[,c("displ", "cyl")], na.rm=T)
mpg %>% mutate (eff2 = rowMeans(select(., c(displ, cyl)), na.rm=T))
?select
mpg %>% mutate (eff2 = rowMeans(select(c(displ, cyl)), na.rm=T))
mpg %>% mutate (eff2 = rowMeans(.,select(c(displ, cyl)), na.rm=T))
mpg %>% mutate (eff2 = rowMeans(., select(c(displ, cyl)), na.rm=T))
mpg %>% mutate (eff2 = rowMeans(., select(c(displ, cyl)), na.rm=T))
mpg %>% mutate (eff2 = rowMeans(., select(c(displ, cyl)), na.rm=T))
mpg %>% mutate (eff2 = rowMeans(., select(c(displ, cyl)), na.rm=T))
mpg %>% mutate (eff2 = rowMeans(select(.,c(displ, cyl)), na.rm=T))
mpg %>% mutate (eff2 = rowMeans(select(,c(displ, cyl)), na.rm=T))
mpg %>% mutate (eff2 = rowMeans(select(.,c(displ, cyl)), na.rm=T))
mydata<-data.frame(x = c(1, 2, 3), y = c(7, 8, 9))
mydata
mydata %>% select(x)
mydata %>% mutate %>% (z = rowMeans(select(., c(x, y)), na.rm=T))
mydata<-data.frame(x = c(1, 2, 3), y = c(7, 8, 9))
mydata
mydata %>% mutate %>% (z = rowMeans(select(., c(x, y)), na.rm=T))
View(mydata)
mydata %>% mutate %>% (z = rowMeans(select(., c(x, y)), na.rm=T))
mpg %>% mutate (eff2 = rowMeans(select(.,c(displ, cyl)), na.rm=T))
class(mpg)
class(mydata)
mydata<-tibble(x = c(1, 2, 3), y = c(7, 8, 9))
class(mydata)
mydata %>% mutate %>% (z = rowMeans(select(., c(x, y)), na.rm=T))
mpg %>% mutate (z = rowMeans(select(.,c(x, y)), na.rm=T))
mydata %>% mutate (z = rowMeans(select(.,c(x, y)), na.rm=T))
mydata<-data.frame(x = c(1, 2, 3), y = c(7, 8, 9))
mydata %>% mutate (z = rowMeans(select(.,c(x, y)), na.rm=T))
mydata %>% mutate (z = rowMeans(c(x, y), na.rm=T))
mydata %>% mutate (z = rowMeans(,c(x, y), na.rm=T))
mydata %>% mutate (z = rowMeans(select(, c(x, y)), na.rm=T))
mydata %>% mutate (z = rowMeans(select(c(x, y)), na.rm=T))
mydata %>% mutate (z = rowMeans(select(.,c(x, y)), na.rm=T))
knitr::opts_chunk$set(echo = TRUE)
#se refers academic self-efficacy
mydata<-data.frame(
id = c(1:3),
se1 = c(1, 3, 4),
se2 = c(2, 2, 5),
se3 = c(1, 3, 3),
)
#se refers academic self-efficacy
mydata<-data.frame(
id = c(1:3),
se1 = c(1, 3, 4),
se2 = c(2, 2, 5),
se3 = c(1, 3, 3)
)
#se refers self-efficacy
#se1 refers to the first survey item of the self-efficacy scale
mydata<-data.frame(
id = c(1:3),
se1 = c(1, 3, 4),
se2 = c(2, 2, 5),
se3 = c(1, 3, 3)
)
missdata<-data.frame(
id = c(1:3),
se1 = c(1, 3, 4),
se2 = c(NA, 2, 5),
se3 = c(1, 3, NA)
)
rowMeans(mydata[, c(se1, se2, se3)], na.rm=T)
rowMeans(mydata[, c("se1", "se2", "se3")], na.rm=T)
mydata$se<-rowMeans(mydata[, c("se1", "se2", "se3")], na.rm=T)
View(mydata)
mydata$se<-rowMeans(mydata[, c("se1", "se2", "se3")], na.rm=T)
mydata
mydata %>% mutate (se = rowMeans(select(.,c("se1", "se2", "se3")), na.rm=T))
library(tidyverse)
mydata %>% mutate (se = rowMeans(select(.,c("se1", "se2", "se3")), na.rm=T))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
#id = unique id number for each participant
#se refers self-efficacy
#se1 refers to the first survey item of the self-efficacy scale
mydata<-data.frame(
id = c(1:3),
se1 = c(1, 3, 4),
se2 = c(2, 2, 5),
se3 = c(1, 3, 3)
)
missdata<-data.frame(
id = c(1:3),
se1 = c(1, 3, 4),
se2 = c(NA, 2, 5),
se3 = c(1, 3, NA)
)
mydata
missdata
mydata$se<-rowMeans(mydata[, c("se1", "se2", "se3")], na.rm=T)
mydata
mydata %>% mutate (se = rowMeans(select(., c("se1", "se2", "se3")), na.rm=T))
library(blogdown)
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
knitr::opts_chunk$set(echo = TRUE)
#list-wise deletion approach
missdata$list<-rowMeans(missdata[, c("se1", "se2", "se3")], na.rm=F)
#full information approach
missdata$full<-rowMeans(missdata[, c("se1", "se2", "se3")], na.rm=T)
missdata
blogdown:::serve_site()
#list-wise deletion approach
mydata %>% mutate (se = rowMeans(select(., c("se1", "se2", "se3")), na.rm=F))
library(tidyverse)
#list-wise deletion approach
mydata %>% mutate (se = rowMeans(select(., c("se1", "se2", "se3")), na.rm=F))
#full information approach
mydata %>% mutate (se = rowMeans(select(., c("se1", "se2", "se3")), na.rm=T))
missdadta<-missdata %>% select(-c(list, full))
#list-wise deletion approach
missdata %>% mutate (list2 = rowMeans(select(., c("se1", "se2", "se3")), na.rm=F))
#full information approach
missdata %>% mutate (full2 = rowMeans(select(., c("se1", "se2", "se3")), na.rm=T))
missdata %>% select(-c(list, full))
#list-wise deletion approach
missdata %>% mutate (list = rowMeans(select(., c("se1", "se2", "se3")), na.rm=F))
#full information approach
missdata %>% mutate (full = rowMeans(select(., c("se1", "se2", "se3")), na.rm=T))
#list-wise deletion approach
missdata %>% mutate (list3 = rowMeans(select(., c("se1", "se2", "se3")), na.rm=F))
#full information approach
missdata %>% mutate (full3 = rowMeans(select(., c("se1", "se2", "se3")), na.rm=T))
missdata
missdata<-missdata %>% select(-c(list, full))
missdata
library(blogdown)
blogdown:::serve_site()
library(blogdown)
blogdown:::serve_site()
library(blogdown)
blogdown:::serve_site()
library(blogdown)
blogdown:::serve_site()
blogdown:::serve_site()
?case_when
knitr::opts_chunk$set(echo = TRUE)
#load required packages
library(tidyverse)
?case_when
x<-data.frame(cost1 = c(2, 3, 4, 2, NA),
cost2 = c(1, 2, 3, 4, 5),
cost3 = c(NA, NA, 3, 2, 1)
)
View(x)
data %>%
case_when(
is.na(cost1) ~ -999,
TRUE ~ as.numeric(cost1)
)
x %>%
mutate(. = case_when(
is.na(.) ~ -999,
TRUE ~ as.numeric(.)
))
x %>%
mutate(across(cost1:cost3) = case_when(
is.na(.x) ~ -999,
TRUE ~ as.numeric(.x)
))
x %>%
mutate(across(cost1:cost3) ~ case_when(
is.na(.x) ~ -999,
TRUE ~ as.numeric(.x)
))
x %>%
mutate(across(cost1:cost3, ~ case_when(
is.na(.x) ~ -999,
TRUE ~ as.numeric(.x)
)))
library(blogdown)
blogdown:::serve_site()
library(blogdown)
blogdown:::serve_site()
library(blogdown)
blogdown:::serve_site()
library(blogdown)
blogdown:::serve_site()
library(blogdown)
blogdown:::serve_site()
knitr::opts_chunk$set(echo = TRUE)
#check our data again
data
#recode
data %>%
mutate(
cost3_r = case_when(
cost3 == 5 ~ 1,
cost3 == 4 ~ 2,
cost3 == 3 ~ 3,
cost3 == 2 ~ 4,
cost3 == 1 ~ 5,
TRUE ~ is.na(cost3)),
)
#load required packages
library(tidyverse)
data<-data.frame(cost1 = c(2, 3, 4, 2, NA),
cost2 = c(1, 2, 3, 4, 5),
cost3 = c(NA, NA, 3, 2, 1)
)
data
#check our data again
data
#recode
data %>%
mutate(
cost3_r = case_when(
cost3 == 5 ~ 1,
cost3 == 4 ~ 2,
cost3 == 3 ~ 3,
cost3 == 2 ~ 4,
cost3 == 1 ~ 5,
TRUE ~ is.na(cost3)),
)
#check our data again
data
#recode
data %>%
mutate(cost3_r = case_when(
cost3 == 5 ~ 1,
cost3 == 4 ~ 2,
cost3 == 3 ~ 3,
cost3 == 2 ~ 4,
cost3 == 1 ~ 5,
TRUE ~ is.na(cost3))
)
#check our data again
data
#recode
data %>%
mutate(cost3_r = case_when(
cost3 == 5 ~ 1,
cost3 == 4 ~ 2,
cost3 == 3 ~ 3,
cost3 == 2 ~ 4,
cost3 == 1 ~ 5)
)
#check our data again
data
#recode
data %>%
mutate(cost3_r = case_when(
cost3 == 5 ~ 1,
cost3 == 4 ~ 2,
cost3 == 3 ~ 3,
cost3 == 2 ~ 4,
cost3 == 1 ~ 5,
TRUE ~ is.na(cost3))
)
?case_when
#check our data again
data
#recode
data %>%
mutate(cost3_r = case_when(
cost3 == 5 ~ 1,
cost3 == 4 ~ 2,
cost3 == 3 ~ 3,
cost3 == 2 ~ 4,
cost3 == 1 ~ 5,
TRUE ~ as.numeric(cost3))
)
#check our data again
data
#recode one reverse scoring item
data %>%
mutate(cost3 = case_when(
cost3 == 5 ~ 1,
cost3 == 4 ~ 2,
cost3 == 3 ~ 3,
cost3 == 2 ~ 4,
cost3 == 1 ~ 5
))
#recorde multiple reverse scoring items at the same time
data %>%
mutate(across(cost1:cost3, ~ case_when(
. == 5 ~ 1,
. == 4 ~ 2,
. == 3 ~ 3,
. == 2 ~ 4,
. == 1 ~ 5
)))
#check our data again
data
#recode one reverse scoring item
data %>%
mutate(cost3 = case_when(
cost3 == 5 ~ 1,
cost3 == 4 ~ 2,
cost3 == 3 ~ 3,
cost3 == 2 ~ 4,
cost3 == 1 ~ 5
))
#recorde multiple reverse scoring items at the same time
data %>%
mutate(across(cost1:cost3, ~ case_when(
. == 5 ~ 1,
. == 4 ~ 2,
. == 3 ~ 3,
. == 2 ~ 4,
. == 1 ~ 5
),
.names = "mean_{.col}")
)
blogdown:::serve_site()
library(blogdown)
blogdown:::serve_site()
library(blogdown)
blogdown:::serve_site()
library(blogdown)
blogdown:::serve_site()
blogdown:::serve_site()
library(blogdown)
blogdown:::serve_site()
knitr::opts_chunk$set(echo = TRUE)
data<-data.frame(cost1 = c(2, 3, 4, 2, NA),
cost2 = c(1, 2, 3, 4, 5),
cost3 = c(NA, NA, 3, 2, 1)
)
data
#let's create a new dataset
data2<-data.frame(
cost1 = c(2, 3, 4, 2, 3),
cost2 = c(1, 2, 3, 4, 5),
cost3 = c(2, 4, 3, 2, 4)
)
data2
#create a new variable called costHigh that is based on the values of cost 1, cost2, and cost 3.
#If all the values of cost1-cost3 are lower than 2, then costHigh will be 0.
#If all the values of cost1-cost3 are higher than 2, then costHigh will be 1.
data %>%
mutate(costHigh = case_when(
cost1 < 2 & cost2 < 2 & cost3 < 2 ~ 0,
TRUE ~ 1))
#load required packages
library(tidyverse)
blogdown:::serve_site()
blogdown:::serve_site()
devtools::install_github("hadley/emo")
install_hugo("devtools")
install.packages("devtools")
library(blogdown)
blogdown:::serve_site()
install.packages("devtools")
devtools::install_github("hadley/emo")
:D :
